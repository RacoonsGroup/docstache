{<img src="https://travis-ci.org/jawspeak/ruby-docx-templater.png" />}[https://travis-ci.org/jawspeak/ruby-docx-templater]


= Turns a docx file template and a data set into a fully formed docx document
Inspired from [https://github.com/jawspeak/ruby-docx-templater] and [https://github.com/michaelfranzl/docx_converter], this takes a .docx file and uses it as a template to create a new docx, with your data

== Features

* All manipulation in memory (great if you have sensitive data)
* Global key/value substitutions by entering a `$KEY$` anywhere in the word document, with whatever formatting you want.
* Multi-row loops inside tables, also with whatever your formatting you wish. `#BEGIN_ROW:XYZ#`... `#END_ROW:XYZ#` see tests/example
* Allows for embedded loops through fully recursive parsing of the document

== Usage
* Create your docx "template" in Word
* Install rvm and bundler
* Run `bundle install`.
* Render new docx files from the template, ex: `ruby render_docx_template.rb`. Look for a rendered_*.docx file.
* Sample output with tests: `rake spec` (unit tests) `rake integration` (opens word)

__MS WORD is painful__ You will probably need to extract and edit the xml template manually after creating in Word, to prepare the ruby script template with it. This is very fiddly / hacky. You can’t have Word’s ugly markup around the fields to template. It will try to break up fields with markup. Test the template, fixing it until the extracted word/document.xml as needed.

I frequently use this workflow:
 - Cut string to replace out to notepad
 - Paste string back into MS Word
 - Save Word Document

